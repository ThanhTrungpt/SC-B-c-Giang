/**
 * @fileoverview D·ªãch v·ª• g·ª≠i th√¥ng b√°o qua Telegram
 * B·ªánh vi·ªán ƒêa khoa B·∫Øc Giang
 */

// C·∫•u h√¨nh Telegram ƒë∆∞·ª£c ƒë·ªçc t·ª´ c·∫•u h√¨nh ·ª©ng d·ª•ng v√† ƒë∆∞·ª£c b·∫£o m·∫≠t t·ªët h∆°n
function getTelegramConfig() {
  return {
    BOT_TOKEN: PropertiesService.getScriptProperties().getProperty('TELEGRAM_BOT_TOKEN') || '',
    GROUP_CHAT_ID: PropertiesService.getScriptProperties().getProperty('TELEGRAM_GROUP_CHAT_ID') || '',
    API_URL: 'https://api.telegram.org/bot'
  };
}

/**
 * Thi·∫øt l·∫≠p webhook cho Telegram Bot
 */
function setupTelegramWebhook() {
  try {
    // L·∫•y c·∫•u h√¨nh Telegram
    const TELEGRAM_CONFIG = getTelegramConfig();
    
    // Ki·ªÉm tra c·∫•u h√¨nh
    if (!TELEGRAM_CONFIG.BOT_TOKEN) {
      console.error('Thi·∫øu c·∫•u h√¨nh BOT_TOKEN cho Telegram');
      return;
    }
    
    // URL c·ªßa ·ª©ng d·ª•ng web
    const scriptUrl = ScriptApp.getService().getUrl();
    
    // URL cho webhook Telegram
    const webhookUrl = `${TELEGRAM_CONFIG.API_URL}${TELEGRAM_CONFIG.BOT_TOKEN}/setWebhook?url=${scriptUrl}`;
    
    // G·ª≠i y√™u c·∫ßu thi·∫øt l·∫≠p webhook
    const response = UrlFetchApp.fetch(webhookUrl);
    const responseData = JSON.parse(response.getContentText());
    
    if (responseData.ok) {
      console.log('Telegram webhook ƒë√£ ƒë∆∞·ª£c thi·∫øt l·∫≠p th√†nh c√¥ng!');
    } else {
      console.error('Kh√¥ng th·ªÉ thi·∫øt l·∫≠p Telegram webhook:', responseData.description);
    }
  } catch (error) {
    console.error('L·ªói khi thi·∫øt l·∫≠p Telegram webhook:', error);
  }
}

/**
 * X·ª≠ l√Ω webhook t·ª´ Telegram
 * @param {Object} data - D·ªØ li·ªáu webhook
 */
function processTelegramWebhook(data) {
  try {
    if (!data || !data.message) return;
    
    const chatId = data.message.chat.id;
    const text = data.message.text || '';
    
    // X·ª≠ l√Ω c√°c l·ªánh t·ª´ Telegram
    if (text.startsWith('/')) {
      handleTelegramCommand(text, chatId);
    }
  } catch (error) {
    console.error('L·ªói khi x·ª≠ l√Ω webhook Telegram:', error);
  }
}

/**
 * X·ª≠ l√Ω c√°c l·ªánh t·ª´ Telegram
 * @param {string} command - L·ªánh nh·∫≠n ƒë∆∞·ª£c
 * @param {string} chatId - ID c·ªßa chat
 */
function handleTelegramCommand(command, chatId) {
  switch (command.toLowerCase()) {
    case '/start':
      sendTelegramMessage(chatId, 'Ch√†o m·ª´ng ƒë·∫øn v·ªõi Bot Qu·∫£n l√Ω s·ª≠a ch·ªØa thi·∫øt b·ªã! G√µ /help ƒë·ªÉ xem danh s√°ch l·ªánh.');
      break;
      
    case '/help':
      sendTelegramMessage(chatId, 
        'Danh s√°ch l·ªánh:\n' +
        '/start - B·∫Øt ƒë·∫ßu s·ª≠ d·ª•ng bot\n' +
        '/help - Hi·ªÉn th·ªã tr·ª£ gi√∫p\n' +
        '/status - Xem tr·∫°ng th√°i h·ªá th·ªëng\n' +
        '/report - Xem b√°o c√°o h√¥m nay'
      );
      break;
      
    case '/status':
      sendSystemStatus(chatId);
      break;
      
    case '/report':
      sendDailyReport(chatId);
      break;
      
    default:
      sendTelegramMessage(chatId, 'L·ªánh kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£. G√µ /help ƒë·ªÉ xem danh s√°ch l·ªánh.');
      break;
  }
}

/**
 * G·ª≠i tin nh·∫Øn qua Telegram
 * @param {string} chatId - ID c·ªßa chat
 * @param {string} message - N·ªôi dung tin nh·∫Øn
 * @param {Object} options - T√πy ch·ªçn b·ªï sung
 * @returns {Object} K·∫øt qu·∫£ g·ª≠i tin nh·∫Øn
 */
function sendTelegramMessage(chatId, message, options = {}) {
  try {
    // L·∫•y c·∫•u h√¨nh Telegram
    const TELEGRAM_CONFIG = getTelegramConfig();
    
    // Ki·ªÉm tra c·∫•u h√¨nh
    if (!TELEGRAM_CONFIG.BOT_TOKEN) {
      console.error('Thi·∫øu c·∫•u h√¨nh BOT_TOKEN cho Telegram');
      return { ok: false, error: 'Missing BOT_TOKEN configuration' };
    }
    
    const payload = {
      chat_id: chatId,
      text: message,
      parse_mode: 'HTML',
      ...options
    };
    
    const sendMessageUrl = `${TELEGRAM_CONFIG.API_URL}${TELEGRAM_CONFIG.BOT_TOKEN}/sendMessage`;
    
    const response = UrlFetchApp.fetch(sendMessageUrl, {
      method: 'post',
      contentType: 'application/json',
      payload: JSON.stringify(payload)
    });
    
    return JSON.parse(response.getContentText());
  } catch (error) {
    console.error('L·ªói khi g·ª≠i tin nh·∫Øn Telegram:', error);
    return { ok: false, error: error.toString() };
  }
}

/**
 * G·ª≠i th√¥ng b√°o b√°o h·ªèng m·ªõi
 * @param {Object} repairData - D·ªØ li·ªáu b√°o h·ªèng
 * @param {Array} deviceData - D·ªØ li·ªáu thi·∫øt b·ªã
 * @param {Array} unitData - D·ªØ li·ªáu ƒë∆°n v·ªã
 * @param {Array} techData - D·ªØ li·ªáu ng∆∞·ªùi s·ª≠a
 */
function sendNewRepairNotification(repairData, deviceData, unitData, techData) {
  try {
    // L·∫•y c·∫•u h√¨nh Telegram
    const TELEGRAM_CONFIG = getTelegramConfig();
    
    // Ki·ªÉm tra c·∫•u h√¨nh
    if (!TELEGRAM_CONFIG.BOT_TOKEN || !TELEGRAM_CONFIG.GROUP_CHAT_ID) {
      console.error('Thi·∫øu c·∫•u h√¨nh Telegram');
      return;
    }
    
    // Format d·ªØ li·ªáu
    const repairId = repairData[CONFIG.COLUMNS.MainSC.ID];
    const unitName = unitData ? unitData[CONFIG.COLUMNS.DSUserDV.DON_VI] : 'Kh√¥ng x√°c ƒë·ªãnh';
    const deviceName = deviceData ? deviceData[CONFIG.COLUMNS.DSThietBi.TEN_THIET_BI] : 'Kh√¥ng x√°c ƒë·ªãnh';
    const deviceModel = deviceData ? deviceData[CONFIG.COLUMNS.DSThietBi.MODEL] : 'N/A';
    const issueDescription = repairData[CONFIG.COLUMNS.MainSC.TINH_TRANG_TB_DV_BAO] || 'Kh√¥ng c√≥ m√¥ t·∫£';
    const requesterName = repairData[CONFIG.COLUMNS.MainSC.HO_TEN] || 'Kh√¥ng x√°c ƒë·ªãnh';
    const requesterPhone = repairData[CONFIG.COLUMNS.MainSC.SO_DIEN_THOAI] || 'N/A';
    const reportTime = repairData[CONFIG.COLUMNS.MainSC.THOI_GIAN_DV_BAO] || new Date().toLocaleString();
    const techName = techData ? techData[CONFIG.COLUMNS.DSUserSua.HO_TEN] : 'Ch∆∞a ch·ªâ ƒë·ªãnh';
    
    // T·∫°o tin nh·∫Øn
    const message = `
<b>üîî B√ÅO H·ªéNG M·ªöI</b>
<b>M√£:</b> ${repairId}
<b>ƒê∆°n v·ªã:</b> ${unitName}
<b>Thi·∫øt b·ªã:</b> ${deviceName} (${deviceModel})
<b>M√¥ t·∫£ t√¨nh tr·∫°ng:</b> ${issueDescription}
<b>Ng∆∞·ªùi y√™u c·∫ßu:</b> ${requesterName} - ${requesterPhone}
<b>Th·ªùi gian b√°o:</b> ${reportTime}
<b>Ph√¢n c√¥ng cho:</b> ${techName}
`;
    
    // G·ª≠i tin nh·∫Øn ƒë·∫øn nh√≥m chat
    sendTelegramMessage(TELEGRAM_CONFIG.GROUP_CHAT_ID, message);
    
    // G·ª≠i tin nh·∫Øn ƒë·∫øn ng∆∞·ªùi s·ª≠a n·∫øu c√≥ UserName Telegram
    if (techData && techData[CONFIG.COLUMNS.DSUserSua.USE_TELE]) {
      sendTelegramMessage(techData[CONFIG.COLUMNS.DSUserSua.USE_TELE], message);
    }
  } catch (error) {
    console.error('L·ªói khi g·ª≠i th√¥ng b√°o b√°o h·ªèng m·ªõi:', error);
  }
}

/**
 * G·ª≠i b√°o c√°o h√†ng ng√†y v·ªÅ c√°c b√°o h·ªèng m·ªõi
 * @param {Array} newReports - Danh s√°ch b√°o h·ªèng m·ªõi
 */
function sendDailyReportViaTelegram(newReports) {
  if (!newReports || newReports.length === 0) return;
  
  try {
    // L·∫•y c·∫•u h√¨nh Telegram
    const TELEGRAM_CONFIG = getTelegramConfig();
    
    // Ki·ªÉm tra c·∫•u h√¨nh
    if (!TELEGRAM_CONFIG.BOT_TOKEN || !TELEGRAM_CONFIG.GROUP_CHAT_ID) {
      console.error('Thi·∫øu c·∫•u h√¨nh Telegram');
      return;
    }
    
    // T·∫°o ti√™u ƒë·ªÅ b√°o c√°o
    const today = new Date();
    const formattedDate = Utilities.formatDate(today, Session.getScriptTimeZone(), 'dd/MM/yyyy');
    
    let message = `<b>üìä B√ÅO C√ÅO H√ÄNG NG√ÄY - ${formattedDate}</b>\n`;
    message += `<b>S·ªë b√°o h·ªèng m·ªõi:</b> ${newReports.length}\n\n`;
    
    // Th√™m th√¥ng tin t·ª´ng b√°o h·ªèng
    for (let i = 0; i < Math.min(newReports.length, 10); i++) {
      const report = newReports[i];
      const repairId = report[CONFIG.COLUMNS.MainSC.ID];
      const unitId = report[CONFIG.COLUMNS.MainSC.DON_VI];
      const deviceId = report[CONFIG.COLUMNS.MainSC.THIET_BI];
      
      // L·∫•y th√¥ng tin thi·∫øt b·ªã v√† ƒë∆°n v·ªã
      const deviceData = findDeviceById(deviceId);
      const unitData = findUnitById(unitId);
      
      const deviceName = deviceData ? deviceData[CONFIG.COLUMNS.DSThietBi.TEN_THIET_BI] : 'Kh√¥ng x√°c ƒë·ªãnh';
      const unitName = unitData ? unitData[CONFIG.COLUMNS.DSUserDV.DON_VI] : 'Kh√¥ng x√°c ƒë·ªãnh';
      const issueDescription = report[CONFIG.COLUMNS.MainSC.TINH_TRANG_TB_DV_BAO] || 'Kh√¥ng c√≥ m√¥ t·∫£';
      
      message += `${i + 1}. <b>${repairId}</b> - ${unitName}\n`;
      message += `   Thi·∫øt b·ªã: ${deviceName}\n`;
      message += `   M√¥ t·∫£: ${issueDescription}\n\n`;
    }
    
    // Th√™m th√¥ng tin n·∫øu c√≥ qu√° nhi·ªÅu b√°o h·ªèng
    if (newReports.length > 10) {
      message += `... v√† ${newReports.length - 10} b√°o h·ªèng kh√°c\n`;
    }
    
    // G·ª≠i tin nh·∫Øn ƒë·∫øn nh√≥m chat
    sendTelegramMessage(TELEGRAM_CONFIG.GROUP_CHAT_ID, message);
  } catch (error) {
    console.error('L·ªói khi g·ª≠i b√°o c√°o h√†ng ng√†y:', error);
  }
}

/**
 * G·ª≠i tr·∫°ng th√°i h·ªá th·ªëng qua Telegram
 * @param {string} chatId - ID c·ªßa chat
 */
function sendSystemStatus(chatId) {
  try {
    const allData = getAllData();
    
    // T√≠nh to√°n s·ªë l∆∞·ª£ng
    const totalDevices = allData.val_DSThietBi.length - 1; // Tr·ª´ h√†ng ti√™u ƒë·ªÅ
    const totalRepairs = allData.val_MainSC.length - 1; // Tr·ª´ h√†ng ti√™u ƒë·ªÅ
    const pendingRepairs = allData.val_MainSC.filter(row => 
      row[CONFIG.COLUMNS.MainSC.TRANG_THAI] === CONFIG.REPAIR_STATUS.BAO_HONG
    ).length;
    const inProgressRepairs = allData.val_MainSC.filter(row => 
      row[CONFIG.COLUMNS.MainSC.TRANG_THAI] === CONFIG.REPAIR_STATUS.DANG_SUA
    ).length;
    
    // T·∫°o tin nh·∫Øn tr·∫°ng th√°i
    const message = `
<b>üìà TR·∫†NG TH√ÅI H·ªÜ TH·ªêNG</b>
<b>T·ªïng s·ªë thi·∫øt b·ªã:</b> ${totalDevices}
<b>T·ªïng s·ªë b√°o h·ªèng:</b> ${totalRepairs}
<b>ƒêang ch·ªù x·ª≠ l√Ω:</b> ${pendingRepairs}
<b>ƒêang s·ª≠a ch·ªØa:</b> ${inProgressRepairs}
<b>C·∫≠p nh·∫≠t l·∫ßn cu·ªëi:</b> ${new Date().toLocaleString()}
`;
    
    // G·ª≠i tin nh·∫Øn
    sendTelegramMessage(chatId, message);
  } catch (error) {
    console.error('L·ªói khi g·ª≠i tr·∫°ng th√°i h·ªá th·ªëng:', error);
    sendTelegramMessage(chatId, 'Kh√¥ng th·ªÉ l·∫•y tr·∫°ng th√°i h·ªá th·ªëng: ' + error.toString());
  }
}

/**
 * G·ª≠i b√°o c√°o h√†ng ng√†y t·ªõi m·ªôt chat c·ª• th·ªÉ
 * @param {string} chatId - ID c·ªßa chat
 */
function sendDailyReport(chatId) {
  try {
    const allData = getAllData();
    
    // L·ªçc c√°c b√°o c√°o trong 24h qua
    const now = new Date();
    const oneDayAgo = new Date(now.getTime() - 24 * 60 * 60 * 1000);
    
    const newReports = allData.val_MainSC.filter(row => {
      if (!row[CONFIG.COLUMNS.MainSC.THOI_GIAN_DV_BAO]) return false;
      
      const reportTime = new Date(row[CONFIG.COLUMNS.MainSC.THOI_GIAN_DV_BAO]);
      return reportTime >= oneDayAgo && reportTime <= now;
    });
    
    if (newReports.length === 0) {
      sendTelegramMessage(chatId, 'Kh√¥ng c√≥ b√°o h·ªèng m·ªõi trong 24 gi·ªù qua.');
      return;
    }
    
    const formattedDate = Utilities.formatDate(now, Session.getScriptTimeZone(), 'dd/MM/yyyy');
    
    let message = `<b>üìä B√ÅO C√ÅO H√ÄNG NG√ÄY - ${formattedDate}</b>\n`;
    message += `<b>S·ªë b√°o h·ªèng m·ªõi:</b> ${newReports.length}\n\n`;
    
    // Th√™m th√¥ng tin t·ª´ng b√°o h·ªèng
    for (let i = 0; i < Math.min(newReports.length, 10); i++) {
      const report = newReports[i];
      const repairId = report[CONFIG.COLUMNS.MainSC.ID];
      const unitId = report[CONFIG.COLUMNS.MainSC.DON_VI];
      const deviceId = report[CONFIG.COLUMNS.MainSC.THIET_BI];
      
      // L·∫•y th√¥ng tin thi·∫øt b·ªã v√† ƒë∆°n v·ªã
      const deviceData = findDeviceById(deviceId);
      const unitData = findUnitById(unitId);
      
      const deviceName = deviceData ? deviceData[CONFIG.COLUMNS.DSThietBi.TEN_THIET_BI] : 'Kh√¥ng x√°c ƒë·ªãnh';
      const unitName = unitData ? unitData[CONFIG.COLUMNS.DSUserDV.DON_VI] : 'Kh√¥ng x√°c ƒë·ªãnh';
      const issueDescription = report[CONFIG.COLUMNS.MainSC.TINH_TRANG_TB_DV_BAO] || 'Kh√¥ng c√≥ m√¥ t·∫£';
      
      message += `${i + 1}. <b>${repairId}</b> - ${unitName}\n`;
      message += `   Thi·∫øt b·ªã: ${deviceName}\n`;
      message += `   M√¥ t·∫£: ${issueDescription}\n\n`;
    }
    
    // Th√™m th√¥ng tin n·∫øu c√≥ qu√° nhi·ªÅu b√°o h·ªèng
    if (newReports.length > 10) {
      message += `... v√† ${newReports.length - 10} b√°o h·ªèng kh√°c\n`;
    }
    
    sendTelegramMessage(chatId, message);
  } catch (error) {
    console.error('L·ªói khi g·ª≠i b√°o c√°o h√†ng ng√†y:', error);
    sendTelegramMessage(chatId, 'Kh√¥ng th·ªÉ t·∫°o b√°o c√°o: ' + error.toString());
  }
}

/**
 * T√¨m ƒë∆°n v·ªã theo ID
 * @param {string} unitId - ID ƒë∆°n v·ªã
 * @returns {Array|null} D·ªØ li·ªáu ƒë∆°n v·ªã
 */
function findUnitById(unitId) {
  const allData = getAllData();
  return allData.val_DSUserDV.find(row => 
    row[CONFIG.COLUMNS.DSUserDV.ID] === unitId
  ) || null;
}

/**
 * Thi·∫øt l·∫≠p c·∫•u h√¨nh Telegram (ch·ªâ ch·∫°y m·ªôt l·∫ßn ho·∫∑c khi c·∫ßn c·∫≠p nh·∫≠t)
 * @param {string} botToken - Token c·ªßa bot Telegram
 * @param {string} groupChatId - ID c·ªßa nh√≥m chat
 */
function setTelegramConfig(botToken, groupChatId) {
  const scriptProperties = PropertiesService.getScriptProperties();
  scriptProperties.setProperty('TELEGRAM_BOT_TOKEN', botToken);
  scriptProperties.setProperty('TELEGRAM_GROUP_CHAT_ID', groupChatId);
  
  // Kh·ªüi t·∫°o l·∫°i webhook sau khi c·∫≠p nh·∫≠t c·∫•u h√¨nh
  setupTelegramWebhook();
  
  return { success: true, message: 'ƒê√£ c·∫≠p nh·∫≠t c·∫•u h√¨nh Telegram th√†nh c√¥ng' };
} 